import{R as u,u as w,$ as f,D as y,a0 as v,U as x,a1 as b,h,E as I,e as m,i as d,r as p,x as S}from"./_virtual_settings-f188cf11.js";var r=globalThis&&globalThis.__decorate||function(l,e,a,t){var s=arguments.length,n=s<3?e:t===null?t=Object.getOwnPropertyDescriptor(e,a):t,o;if(typeof Reflect=="object"&&typeof Reflect.decorate=="function")n=Reflect.decorate(l,e,a,t);else for(var g=l.length-1;g>=0;g--)(o=l[g])&&(n=(s<3?o(n):s>3?o(e,a,n):o(e,a))||n);return s>3&&n&&Object.defineProperty(e,a,n),n},c;let i=c=class extends u{constructor(e){super(e),"src"in e||w().warn({message:"No source specified for the image",remarks:`<p>The image won&#39;t be visible unless you specify a source:</p>
<pre class=""><code class="language-tsx"><span class="hljs-keyword">import</span> myImage <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./example.png&#x27;</span>;
<span class="hljs-comment">// ...</span>
<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">{myImage}</span> /&gt;</span></span>;</code></pre><p>If you did this intentionally, and don&#39;t want to see this warning, set the <code>src</code>
property to <code>null</code>:</p>
<pre class=""><code class="language-tsx">&lt;<span class="hljs-title class_">Img</span> src={<span class="hljs-literal">null</span>} /&gt;</code></pre><p><a href='https://motioncanvas.io/docs/media#images' target='_blank'>Learn more</a> about working with
images.</p>
`,inspect:this.key})}desiredSize(){const e=super.desiredSize();if(e.x===null&&e.y===null){const a=this.image();return{x:a.naturalWidth,y:a.naturalHeight}}return e}image(){const e=this.src();let a="",t="";if(e){t=f(e);const n=new URL(t,window.location.origin);if(n.origin===window.location.origin){const o=this.view().assetHash();n.searchParams.set("asset-hash",o)}a=n.toString()}let s=c.pool[t];return s||(s=document.createElement("img"),s.crossOrigin="anonymous",s.src=a,c.pool[t]=s),s.complete||y.collectPromise(new Promise((n,o)=>{s.addEventListener("load",n),s.addEventListener("error",()=>o(new v({message:"Failed to load an image",remarks:`The <code>src</code> property was set to:
<pre><code>${e}</code></pre>
...which resolved to the following url:
<pre><code>${a}</code></pre>
Make sure that source is correct and that the image exists.<br/>
<a target='_blank' href='https://motioncanvas.io/docs/media#images'>Learn more</a>
about working with images.`,inspect:this.key})))})),s}imageCanvas(){const e=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});if(!e)throw new Error("Could not create an image canvas");return e}filledImageCanvas(){const e=this.imageCanvas(),a=this.image();return e.canvas.width=a.naturalWidth,e.canvas.height=a.naturalHeight,e.imageSmoothingEnabled=this.smoothing(),e.drawImage(a,0,0),e}async draw(e){this.drawShape(e);const a=this.alpha();if(a>0){const t=x.fromSizeCentered(this.computedSize());e.save(),e.clip(this.getPath()),a<1&&(e.globalAlpha*=a),e.imageSmoothingEnabled=this.smoothing(),b(e,this.image(),t),e.restore()}this.clip()&&e.clip(this.getPath()),await this.drawChildren(e)}applyFlex(){super.applyFlex();const e=this.image();this.element.style.aspectRatio=(this.ratio()??e.naturalWidth/e.naturalHeight).toString()}getColorAtPoint(e){const a=this.computedSize(),t=this.naturalSize(),s=new h(e).add(this.computedSize().scale(.5)).mul(t.div(a).safe);return this.getPixelColor(s)}naturalSize(){const e=this.image();return new h(e.naturalWidth,e.naturalHeight)}getPixelColor(e){const a=this.filledImageCanvas(),t=new h(e),s=a.getImageData(t.x,t.y,1,1).data;return new I({r:s[0],g:s[1],b:s[2],a:s[3]/255})}collectAsyncResources(){super.collectAsyncResources(),this.image()}};i.pool={};r([m()],i.prototype,"src",void 0);r([d(1),m()],i.prototype,"alpha",void 0);r([d(!0),m()],i.prototype,"smoothing",void 0);r([p()],i.prototype,"image",null);r([p()],i.prototype,"imageCanvas",null);r([p()],i.prototype,"filledImageCanvas",null);r([p()],i.prototype,"naturalSize",null);i=c=r([S("Img")],i);export{i as I};
