"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[2908],{2247:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>y});var t=r(4041);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},d=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(r),g=a,y=c["".concat(s,".").concat(g)]||c[g]||u[g]||o;return r?t.createElement(y,i(i({ref:n},d),{},{components:r})):t.createElement(y,i({ref:n},d))}));function y(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},7650:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var t=r(9575),a=(r(4041),r(2247));const o={sidebar_position:2,slug:"/render-endpoint"},i="Deploy a Revideo Project",l={unversionedId:"webapps/rendering-endpoint",id:"webapps/rendering-endpoint",title:"Deploy a Revideo Project",description:"You can use our CLI to deploy your revideo project, which will expose a web",source:"@site/docs/webapps/rendering-endpoint.mdx",sourceDirName:"webapps",slug:"/render-endpoint",permalink:"/render-endpoint",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/webapps/rendering-endpoint.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/render-endpoint"},sidebar:"docs",previous:{title:"Building Web Apps",permalink:"/category/building-web-apps"},next:{title:"Parallelized Rendering with Serverless Functions",permalink:"/parallelized-rendering"}},s={},p=[{value:"Starting a render job",id:"starting-a-render-job",level:2},{value:"Rendering With Callbacks",id:"rendering-with-callbacks",level:2},{value:"Downloading rendered videos",id:"downloading-rendered-videos",level:3}],d={toc:p},c="wrapper";function u(e){let{components:n,...r}=e;return(0,a.yg)(c,(0,t.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"deploy-a-revideo-project"},"Deploy a Revideo Project"),(0,a.yg)("p",null,"You can use our CLI to deploy your revideo project, which will expose a web\nserver with endpoints for rendering videos and downloading rendered videos as\nmp4. An application example of this can be found in our\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/saas-template"},"Saas template"),"."),(0,a.yg)("p",null,"To deploy a Revideo project, run the following command:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx revideo serve --projectFile ./src/project.ts --port 3000\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"--port")," parameter is optional. By default, the service will use port 4000."),(0,a.yg)("h2",{id:"starting-a-render-job"},"Starting a render job"),(0,a.yg)("p",null,"Once your Revideo project is deployed, you can render videos using the ",(0,a.yg)("inlineCode",{parentName:"p"},"/render"),"\nendpoint by passing your desired ",(0,a.yg)("inlineCode",{parentName:"p"},"settings")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"variables")," as a parameter. This\nendpoint will trigger a render process on the server, and respond with a\ndownload url once the rendering process has finished."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example request:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://your-revideo-service.com/render \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "variables": {\n      "image": "some-image.png",\n      "color": "red"\n    },\n    "settings": { "workers": 2 }\n  }\'\n')),(0,a.yg)("p",null,"If you want to report the rendering progress back to the client, you can set the\n",(0,a.yg)("inlineCode",{parentName:"p"},"streamProgress")," parameter to true:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://your-revideo-service.com/render \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "variables": {\n      "image": "some-image.png",\n      "color": "red"\n    },\n    "settings": { "workers": 2 },\n    "streamProgress": true\n  }\'\n')),(0,a.yg)("h2",{id:"rendering-with-callbacks"},"Rendering With Callbacks"),(0,a.yg)("p",null,"If you don't want to keep the connection to the server open during the full\nduration of the rendering process, you can render videos with the ",(0,a.yg)("inlineCode",{parentName:"p"},"callbackUrl"),"\nparameter. This will trigger a render process on the server, and respond to a\ncallback url after the rendering process is done."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example request:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST http://your-revideo-service.com/render \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "variables": {\n      "image": "some-image.png",\n      "color": "red"\n    },\n    "callbackUrl": "http://your-callback-url.com/render-status"\n  }\'\n')),(0,a.yg)("p",null,"In this request, ",(0,a.yg)("inlineCode",{parentName:"p"},"variables")," refer to the variables passed to your video, and\n",(0,a.yg)("inlineCode",{parentName:"p"},"callbackUrl")," is the url that will receive an update when the rendering process\nhas finished. The immediate response to the request will contain a ",(0,a.yg)("inlineCode",{parentName:"p"},"jobId")," that\nlets the client distinguish between status updates from different rendering\njobs."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example response:")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "jobId": "123e4567-e89b-12d3-a456-426614174000"\n}\n')),(0,a.yg)("h3",{id:"downloading-rendered-videos"},"Downloading rendered videos"),(0,a.yg)("p",null,"Once the render job is finished or has failed, the revideo servide will send an\nupdate to the specified callback url via a POST request. The response will\ncontain a download link from which you can download the exported video."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example Callback Response (success):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST <callbackUrl> \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "jobId": "123e4567-e89b-12d3-a456-426614174000",\n  "status": "success",\n  "downloadLink": "http://your-revideo-service.com/download/42078492-fbb9-4570-a329-785e87456618.mp4"\n}\'\n')),(0,a.yg)("p",null,"You can now download the file using the download link:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"GET http://your-revideo-service.com/download/42078492-fbb9-4570-a329-785e87456618.mp4\n")),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Note:")," You should not use this link as a method of permanently serving files\n(for example to provide a download link to your users). Instead, it should only\nbe used to download the file once, and afterwards the file should be stored on a\npermanent storage solution like a bucket. By default, the file will be deleted\n10 minutes after the success callback."),(0,a.yg)("p",null,(0,a.yg)("strong",{parentName:"p"},"Example Callback Response (error):")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},'curl -X POST <callbackUrl> \\\n-H "Content-Type: application/json" \\\n-d \'{\n  "jobId": "123e4567-e89b-12d3-a456-426614174000",\n  "status": "error",\n  "error": "<error message>"\n}\'\n')))}u.isMDXComponent=!0}}]);