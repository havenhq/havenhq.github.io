"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[1408],{2247:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>m});var o=r(4041);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var d=o.createContext({}),s=function(e){var n=o.useContext(d),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=s(e.components);return o.createElement(d.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=s(r),g=t,m=u["".concat(d,".").concat(g)]||u[g]||c[g]||i;return r?o.createElement(m,a(a({ref:n},p),{},{components:r})):o.createElement(m,a({ref:n},p))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,a=new Array(i);a[0]=g;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[u]="string"==typeof e?e:t,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}g.displayName="MDXCreateElement"},1768:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=r(9575),t=(r(4041),r(2247));const i={sidebar_position:11,slug:"/rendering-in-production"},a="Deploying a Rendering Service in Production",l={unversionedId:"guide/building-webapps/deploy-rendering-service",id:"guide/building-webapps/deploy-rendering-service",title:"Deploying a Rendering Service in Production",description:"Rendering videos is a relatively expensive operation compared to most other",source:"@site/docs/guide/building-webapps/deploy-rendering-service.mdx",sourceDirName:"guide/building-webapps",slug:"/rendering-in-production",permalink:"/rendering-in-production",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/guide/building-webapps/deploy-rendering-service.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:11,frontMatter:{sidebar_position:11,slug:"/rendering-in-production"},sidebar:"docs",previous:{title:"Local Development with the CLI",permalink:"/render-endpoint"},next:{title:"Revideo SaaS Template",permalink:"/saas-template"}},d={},s=[{value:"Parallelized Rendering with Serverless Functions (Recommended)",id:"parallelized-rendering-with-serverless-functions-recommended",level:2},{value:"Parallelized Rendering on AWS Lambda",id:"parallelized-rendering-on-aws-lambda",level:3},{value:"Parallelized Rendering with Google Cloud Functions",id:"parallelized-rendering-with-google-cloud-functions",level:3},{value:"Single-process Rendering",id:"single-process-rendering",level:2},{value:"Revideo platform",id:"revideo-platform",level:2}],p={toc:s},u="wrapper";function c(e){let{components:n,...r}=e;return(0,t.yg)(u,(0,o.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"deploying-a-rendering-service-in-production"},"Deploying a Rendering Service in Production"),(0,t.yg)("p",null,"Rendering videos is a relatively expensive operation compared to most other\nrequests served in a web app - you should therefore pay attention to which\nhardware and deployment setup you want to use to deploy a rendering service for\nyour Revideo apps."),(0,t.yg)("p",null,"You should expect a rendering job (a function call to ",(0,t.yg)("inlineCode",{parentName:"p"},"renderVideo()")," or\n",(0,t.yg)("inlineCode",{parentName:"p"},"renderPartialVideo()")," (",(0,t.yg)("a",{parentName:"p",href:"/api/renderer/renderVideo"},"API Reference"),")) to\n",(0,t.yg)("strong",{parentName:"p"},"require at least 8-10GB of RAM")," to run fast and without issues. When multiple\nrendering jobs run at the same time, they will get slower if more RAM is not\navailable."),(0,t.yg)("p",null,"Below, we discuss a few possibilities of how you can deploy a rendering service\nin production:"),(0,t.yg)("h2",{id:"parallelized-rendering-with-serverless-functions-recommended"},"Parallelized Rendering with Serverless Functions (Recommended)"),(0,t.yg)("p",null,"To speed up rendering in production, it's useful to parallelize rendering with\nserverless functions using ",(0,t.yg)("inlineCode",{parentName:"p"},"renderPartialVideo()"),"\n(",(0,t.yg)("a",{parentName:"p",href:"https://docs.re.video/renderer/renderPartialVideo"},"docs"),"). When rendering a 10\nminute video, parallelizing across 10 workers would spin up 10 serverless\nfunctions that each render one minute of the video. We have created example\nguides for parallelized rendering on AWS Lambda and Google Cloud Functions."),(0,t.yg)("p",null,(0,t.yg)("strong",{parentName:"p"},"Note: In our experiments, parallelized Rendering on AWS Lambda performs\nsignificantly faster due to much better cold start times. We highly recommend\nusing AWS Lambda for rendering instead of Google Cloud Functions")),(0,t.yg)("h3",{id:"parallelized-rendering-on-aws-lambda"},"Parallelized Rendering on AWS Lambda"),(0,t.yg)("p",null,"You can find the example project for parallelized rendering on AWS Lambda along\nwith a setup guide\n",(0,t.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/parallelized-aws-lambda"},"here")),(0,t.yg)("h3",{id:"parallelized-rendering-with-google-cloud-functions"},"Parallelized Rendering with Google Cloud Functions"),(0,t.yg)("p",null,"You can find the example project for parallelized rendering with Cloud Functions\nalong with a setup guide\n",(0,t.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/google-cloud-run-parallelized"},"here")),(0,t.yg)("h2",{id:"single-process-rendering"},"Single-process Rendering"),(0,t.yg)("p",null,"If your videos are short and / or rendering speeds are not a huge factor for\nyou, you can render videos across a single process instead of setting up\nparallelized rendering. For example, here is a super simple express server for\nrendering a video:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-ts"},"import {renderVideo} from '@revideo/renderer';\nimport {v4 as uuidv4} from 'uuid';\nimport * as express from 'express';\nimport * as fs from 'fs';\nimport * as path from 'path';\n\nconst app = express();\napp.use(express.json());\n\napp.get('/', (req, res) => {\n  res.status(200).send(`Hello World!`);\n});\n\napp.post('/render', async (req, res) => {\n  try {\n    const {variables} = req.body;\n    const jobId = uuidv4();\n\n    console.log('Rendering video...');\n    await renderVideo({\n      projectFile: './src/project.ts',\n      variables,\n      settings: {outFile: `${jobId}.mp4`, logProgress: true},\n    });\n    console.log('Finished rendering');\n\n    const outputFilePath = path.join(process.cwd(), `./output/${jobId}.mp4`);\n\n    if (fs.existsSync(outputFilePath)) {\n      res.sendFile(outputFilePath); // alternatively (and recommended), upload file to a bucket\n    } else {\n      res.status(500).send('Rendered video not found');\n    }\n  } catch (err) {\n    console.error('Error rendering video:', err);\n    res.status(500).send('Error rendering video');\n  }\n});\n\nconst port = parseInt(process.env.PORT) || 8000;\napp.listen(port, () => {\n  console.log(`listening on port ${port}`);\n});\n")),(0,t.yg)("p",null,"You can deploy a server like this on a normal VM instance or on a serverless\ndeployment platform like Google Cloud Run."),(0,t.yg)("h2",{id:"revideo-platform"},"Revideo platform"),(0,t.yg)("p",null,"We are building a cloud platform that makes it easy to deploy Revideo projects\nand uses infrastructure optimized for fast rendering speeds. You can sign up to\nits waitlist ",(0,t.yg)("a",{parentName:"p",href:"https://tally.so/r/mOz4GK"},"here"),"."))}c.isMDXComponent=!0}}]);