"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[4383],{2247:(e,n,o)=>{o.d(n,{xA:()=>s,yg:()=>y});var t=o(4041);function a(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function r(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){a(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function i(e,n){if(null==e)return{};var o,t,a=function(e,n){if(null==e)return{};var o,t,a={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(a[o]=e[o]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(a[o]=e[o])}return a}var d=t.createContext({}),c=function(e){var n=t.useContext(d),o=n;return e&&(o="function"==typeof e?e(n):r(r({},n),e)),o},s=function(e){var n=c(e.components);return t.createElement(d.Provider,{value:n},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,a=e.mdxType,l=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(o),m=a,y=p["".concat(d,".").concat(m)]||p[m]||g[m]||l;return o?t.createElement(y,r(r({ref:n},s),{},{components:o})):t.createElement(y,r({ref:n},s))}));function y(e,n){var o=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=o.length,r=new Array(l);r[0]=m;var i={};for(var d in n)hasOwnProperty.call(n,d)&&(i[d]=n[d]);i.originalType=e,i[p]="string"==typeof e?e:a,r[1]=i;for(var c=2;c<l;c++)r[c]=o[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},5906:(e,n,o)=>{o.d(n,{A:()=>p});var t=o(9531),a=o(53),l=o(4041),r=o(9631),i=o(9575);function d(e){let{width:n=24,height:o=24,...t}=e;return l.createElement("svg",(0,i.A)({viewBox:"0 0 24 24",width:n,height:o,"aria-hidden":!0},t),l.createElement("path",{d:"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z",fill:"currentColor"}))}const c={container:"container_lQCo",small:"small_As57",banner:"banner_A4QS",player:"player_tELG",link:"link_BTzN",icon:"icon_wSGd"};function s(e){let{name:n}=e;const o=`https://github.com/revideo/revideo/blob/main/packages/examples/src/scenes/${n}.tsx`;return l.createElement(r.A,{to:o,className:(0,a.A)("padding--sm",c.link)},l.createElement("span",null,"View source code"),l.createElement(d,{className:c.icon}))}function p(e){let{name:n,banner:o,small:t,link:r}=e;return l.createElement("div",{className:(0,a.A)(c.container,o&&c.banner,t&&c.small)},l.createElement("revideo-player",{class:c.player,src:`/examples/${n}.js`,auto:o}),l.createElement(s,{name:r||n}))}t.A.canUseDOM&&o.e(3980).then(o.bind(o,3980))},6289:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>s});var t=o(9575),a=(o(4041),o(2247)),l=o(5906);const r={sidebar_position:1,slug:"/code-block"},i="CodeBlock",d={unversionedId:"components/code-block",id:"components/code-block",title:"CodeBlock",description:"_Note: These docs were adopted from the original",source:"@site/docs/components/code-block.mdx",sourceDirName:"components",slug:"/code-block",permalink:"/code-block",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/components/code-block.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/code-block"},sidebar:"docs",previous:{title:"Components",permalink:"/category/components"},next:{title:"LaTeX",permalink:"/nodes"}},c={},s=[{value:"Using the component",id:"using-the-component",level:2},{value:"Indentation",id:"indentation",level:3},{value:"Selection",id:"selection",level:3},{value:"Using Helpers",id:"using-helpers",level:4},{value:"Raw Usage",id:"raw-usage",level:4},{value:"Animating code",id:"animating-code",level:3}],p={toc:s},g="wrapper";function m(e){let{components:n,...o}=e;return(0,a.yg)(g,(0,t.A)({},p,o,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"codeblock"},"CodeBlock"),(0,a.yg)("p",null,(0,a.yg)("em",{parentName:"p"},"Note: These docs were adopted from the original\n",(0,a.yg)("a",{parentName:"em",href:"https://motioncanvas.io/docs/"},"Motion Canvas")," docs")),(0,a.yg)(l.A,{banner:!0,name:"code-block",mdxType:"AnimationPlayer"}),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"CodeBlock"),' component is used to present syntax highlighted code. It can\nautomatically highlight many common languages. That code can then be modified in\nplace to present changes to the viewer. Modified code will animate from the\nprior code to the new code by removing old code, translating the remaining code,\nand inserting new code. You may also "select" code in order to call attention to\nimportant snippets.'),(0,a.yg)("h2",{id:"using-the-component"},"Using the component"),(0,a.yg)("p",null,"To display code, set the ",(0,a.yg)("inlineCode",{parentName:"p"},"code")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"language")," property."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},'import {CodeBlock} from \'@revideo/2d/lib/components/CodeBlock\';\n\nyield view.add(\n  <CodeBlock language="c#" code={`Console.WriteLine("Hello World!")`} />,\n);\n')),(0,a.yg)("p",null,"You can find a list of available languages in the ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/wooorm/starry-night#languages"},"Starry Night"),"\nrepository\u2014the library used for syntax highlighting. The default language is\n",(0,a.yg)("inlineCode",{parentName:"p"},"tsx"),", the language of Motion Canvas, which we will use for the rest of this\nguide."),(0,a.yg)("p",null,"Note that unlike most components, you must ",(0,a.yg)("inlineCode",{parentName:"p"},"yield")," any call to ",(0,a.yg)("inlineCode",{parentName:"p"},"add")," which\nincludes a ",(0,a.yg)("inlineCode",{parentName:"p"},"CodeBlock"),". This prompts Motion Canvas to prepare the syntax\nhighlighter."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(<CodeBlock />);\n")),(0,a.yg)("h3",{id:"indentation"},"Indentation"),(0,a.yg)("p",null,"For convenience, the indentation of code will be automatically adjust whenever\nthe code starts with a new line."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {CodeBlock} from '@revideo/2d/lib/components/CodeBlock';\n\nyield view.add(\n  // note that the ` bracket is followed by a new line\n  <CodeBlock\n    code={`\n      console.log('Hello World!')\n        // more indented\n      // less indented`}\n  />,\n);\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"console.log('Hello World!');\n  // more indented\n// less indented\n")),(0,a.yg)("p",null,"The indentation is then set by the least indented code."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {CodeBlock} from '@revideo/2d/lib/components/CodeBlock';\n\nyield view.add(\n  // note that the ` bracket is followed by a new line\n  <CodeBlock\n    code={`\n      console.log('Hello World!')\n    // less indented\n      // more indented`}\n  />,\n);\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"  console.log('Hello World!');\n// less indented\n  // more indented\n")),(0,a.yg)("h3",{id:"selection"},"Selection"),(0,a.yg)("p",null,'Code may be "selected" to call attention to it. The default behavior is to\ndesaturate any unselected text.'),(0,a.yg)("h4",{id:"using-helpers"},"Using Helpers"),(0,a.yg)("p",null,"You can define the selection with the help of three helper functions \u2014 ",(0,a.yg)("inlineCode",{parentName:"p"},"range"),",\n",(0,a.yg)("inlineCode",{parentName:"p"},"word")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"lines"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {CodeBlock} from '@revideo/2d/lib/components/CodeBlock';\nimport {createRef} from '@revideo/core';\n\nconst codeBlockRef = createRef<CodeBlock>();\nyield view.add(\n  <CodeBlock ref={codeBlockRef} code={`...`} selection={range(0, 2, 0, 4)} />,\n);\n// or\nyield codeBlockRef.selection(range(0, 2, 0, 4));\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"range")," expects 4 parameters: the starting line, starting character offset,\nending line and ending character offset. Do note however that all values are\n",(0,a.yg)("strong",{parentName:"p"},"zero-indexed"),". So if you want to select a 5 character long word on the first\nline that has another 4 characters before it, you would use the following call:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"range(\n  0, // starting on the first line\n  4, // starting with the 5th character\n  0, // ending on the first line\n  8, // ending with the 9th character\n);\n")),(0,a.yg)("p",null,"For this specific use case there is however another helper, ",(0,a.yg)("inlineCode",{parentName:"p"},"word"),". It expects\n2-3 parameters - the starting line and character offset, aswell as an optional\nword length."),(0,a.yg)("p",null,"The aforementioned ",(0,a.yg)("inlineCode",{parentName:"p"},"range"),"-Example could be rewritten as follows using the\n",(0,a.yg)("inlineCode",{parentName:"p"},"word"),"-Helper:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"word(\n  0, // starting on the first line\n  4, // starting with the 5th character,\n  5, // the selection will have a total of 5 chars, can be ommited, which will select the remainder of this line\n);\n")),(0,a.yg)("p",null,"Do note that the ",(0,a.yg)("inlineCode",{parentName:"p"},"word"),"-Helper can only be applied on a per-line basis."),(0,a.yg)("p",null,"Finally, you can use the ",(0,a.yg)("inlineCode",{parentName:"p"},"lines")," function to select whole lines of code. The\nfollowing will select the 5th up to the 10th line:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"lines(\n  4, // starting line\n  9, // ending line, can be ommited, which will only select the starting line\n);\n")),(0,a.yg)("admonition",{type:"tip"},(0,a.yg)("p",{parentName:"admonition"},"You can also mix and match helpers by using the spread operator!"),(0,a.yg)("p",{parentName:"admonition"},"You could select the 3rd line and a 10 character long word on the 5th line\nstarting at the 6th character using the following expression:"),(0,a.yg)("pre",{parentName:"admonition"},(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield * codeRef().selection([...lines(2), ...word(4, 5, 10)], 1);\n"))),(0,a.yg)("p",null,"If you wish to undo a selection, you can either select all lines from ",(0,a.yg)("inlineCode",{parentName:"p"},"0")," to\n",(0,a.yg)("inlineCode",{parentName:"p"},"Infinity"),", or simply pass ",(0,a.yg)("inlineCode",{parentName:"p"},"DEFAULT")," as a selection, as shown below:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"import {DEFAULT} from '@revideo/core';\n\n// highlight lines 1 and 2\nyield * codeRef().selection(lines(1, 2), 1);\n\n// highlight all lines\nyield * codeRef().selection(DEFAULT, 1);\n")),(0,a.yg)("h4",{id:"raw-usage"},"Raw Usage"),(0,a.yg)("p",null,"Under the hood the helpers return a nested array which defines multiple\nselections using two tuples, each defining a line and character offset per\nselection."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"<CodeBlock\n  selection={[\n    [\n      // First selection\n      [lineFrom, characterFrom],\n      [lineTo, characterTo],\n    ],\n    [\n      // Second selection\n      [lineFrom, characterFrom],\n      [lineTo, characterTo],\n    ],\n    [\n      //... etc\n    ],\n  ]}\n/>\n")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"lines(4,7)")," will for example return the following structure:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-ts"},"[\n  [\n    [4, 0],\n    [7, Infinity],\n  ],\n];\n")),(0,a.yg)("h3",{id:"animating-code"},"Animating code"),(0,a.yg)("p",null,"You may insert, remove, or edit the displayed code, any of which will animate\nthe code to its new state. All of these changes are performed with the ",(0,a.yg)("inlineCode",{parentName:"p"},"edit"),"\nmethod on a ",(0,a.yg)("inlineCode",{parentName:"p"},"CodeBlock")," instance."),(0,a.yg)("p",null,"To insert code, start by using ",(0,a.yg)("inlineCode",{parentName:"p"},"createRef")," to store your ",(0,a.yg)("inlineCode",{parentName:"p"},"CodeBlock")," instance\nfor future edits. Then call ",(0,a.yg)("inlineCode",{parentName:"p"},"edit")," with an embedded ",(0,a.yg)("inlineCode",{parentName:"p"},"insert")," call to add the new\ncode."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {CodeBlock, insert} from '@revideo/2d/lib/components/CodeBlock';\nimport {createRef} from '@revideo/core';\n\nconst codeRef = createRef<CodeBlock>();\n\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\n// duration of 1.2 seconds\nyield * codeRef().edit(1.2)`var myBool${insert(' = true')};`;\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"var myBool;\n// will animate to\nvar myBool = true;\n")),(0,a.yg)("p",null,"Removing code is similar, only with the provided code being removed during the\nanimation."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {CodeBlock, remove} from '@revideo/2d/lib/components/CodeBlock';\n\nyield view.add(<CodeBlock ref={codeRef} code={`var myBool = true;`} />);\n\nyield * codeRef().edit(1.2)`var myBool${remove(' = true')};`;\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"var myBool = true;\n// will animate to\nvar myBool;\n")),(0,a.yg)("p",null,"Finally, replacing code combines removal and insertion into one call."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(<CodeBlock ref={codeRef} code={`var myBool = true;`} />);\n\nyield * codeRef().edit(1.2)`var myBool = ${edit('true', 'false')};`;\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"var myBool = true;\n// will animate to\nvar myBool = false;\n")),(0,a.yg)("p",null,"Editing code will update your selection to highlight the changes. If you would\nlike to retain your selection through an animation, use ",(0,a.yg)("inlineCode",{parentName:"p"},"edit(duration, false)"),"."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\n// note the second argument to edit\nyield * codeRef().edit(1.2, false)`var myBool${insert(' = true')};`;\n")),(0,a.yg)("p",null,"You may apply multiple edits to a code block over the course of a video, each\nmodifying the prior code to a new state."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\nyield * codeRef().edit(1.2)`var myBool${insert(' = true')};`;\nyield * waitFor(1);\nyield * codeRef().edit(1.2)`var myBool = ${edit('true', 'false')};`;\nyield * waitFor(1);\nyield * codeRef().edit(1.2)`var myBool${remove(' = false')};`;\n")),(0,a.yg)("p",null,"The proceeding code will animate through"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"var myBool;\nvar myBool = true;\nvar myBool = false;\nvar myBool;\n")),(0,a.yg)("p",null,"You can also apply multiple changes to a code block in one ",(0,a.yg)("inlineCode",{parentName:"p"},"edit"),", such that all\nchanges are applied simultaneously."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(<CodeBlock ref={codeRef} code={`var myBool;`} />);\n\nyield *\n  codeRef().edit(1.2)`${edit('var', 'const')} myBool${insert(' = true')};`;\n")),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"var myBool;\n// will animate to\nconst myBool = true;\n")))}m.isMDXComponent=!0}}]);