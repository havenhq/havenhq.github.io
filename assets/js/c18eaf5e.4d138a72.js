"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[1573],{2247:(e,r,n)=>{n.d(r,{xA:()=>d,yg:()=>m});var o=n(4041);function t(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function i(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?i(Object(n),!0).forEach((function(r){t(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function l(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var p=o.createContext({}),s=function(e){var r=o.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):a(a({},r),e)),n},d=function(e){var r=s(e.components);return o.createElement(p.Provider,{value:r},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var n=e.components,t=e.mdxType,i=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),g=t,m=u["".concat(p,".").concat(g)]||u[g]||c[g]||i;return n?o.createElement(m,a(a({ref:r},d),{},{components:n})):o.createElement(m,a({ref:r},d))}));function m(e,r){var n=arguments,t=r&&r.mdxType;if("string"==typeof e||t){var i=n.length,a=new Array(i);a[0]=g;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l[u]="string"==typeof e?e:t,a[1]=l;for(var s=2;s<i;s++)a[s]=n[s];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7783:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>p,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var o=n(9575),t=(n(4041),n(2247));const i={sidebar_position:1,slug:"/renderer/renderVideo"},a="renderVideo()",l={unversionedId:"api-reference/renderer/renderVideo",id:"api-reference/renderer/renderVideo",title:"renderVideo()",description:"The renderVideo function lets you render (parameterized) videos in a nodejs",source:"@site/docs/api-reference/renderer/renderVideo.mdx",sourceDirName:"api-reference/renderer",slug:"/renderer/renderVideo",permalink:"/renderer/renderVideo",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/api-reference/renderer/renderVideo.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/renderer/renderVideo"},sidebar:"docs",previous:{title:"@revideo/renderer",permalink:"/category/revideorenderer"}},p={},s=[{value:"Example Usage",id:"example-usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"configFile:",id:"configfile",level:3},{value:"params (optional):",id:"params-optional",level:3},{value:"progressCallback (optional):",id:"progresscallback-optional",level:3},{value:"settings (optional):",id:"settings-optional",level:3},{value:"name (optional):",id:"name-optional",level:4},{value:"workers (optional):",id:"workers-optional",level:3},{value:"range (optional):",id:"range-optional",level:4},{value:"dimensions (optional):",id:"dimensions-optional",level:4},{value:"puppeteer (optional):",id:"puppeteer-optional",level:4}],d={toc:s},u="wrapper";function c(e){let{components:r,...n}=e;return(0,t.yg)(u,(0,o.A)({},d,n,{components:r,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"rendervideo"},"renderVideo()"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"renderVideo")," function lets you render (parameterized) videos in a nodejs\nprocess. It uses a headless browser to achieve this."),(0,t.yg)("h2",{id:"example-usage"},"Example Usage"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},"import {renderVideo} from '@revideo/renderer';\n\nfunction logProgress(id: number, progress: number) {\n  console.log(`[${id}] Progress: ${(progress * 100).toFixed(1)}%`);\n}\n\nrenderVideo('./vite.config.ts', {color: 'white'}, logProgress, {\n  name: 'out',\n  workers: 1,\n  range: [1, 3],\n  dimensions: [1080, 1792]\n  puppeteer: {\n    args: ['--no-sandbox'],\n  },\n});\n")),(0,t.yg)("h2",{id:"arguments"},"Arguments"),(0,t.yg)("h3",{id:"configfile"},"configFile:"),(0,t.yg)("p",null,"A string pointing towards your Vite config file. This will almost always be\n",(0,t.yg)("inlineCode",{parentName:"p"},"vite.config.ts"),"."),(0,t.yg)("h3",{id:"params-optional"},"params (optional):"),(0,t.yg)("p",null,"Parameters / or variables passed to your video. See ",(0,t.yg)("a",{parentName:"p",href:"/parameterized-video"},"here"),"\nlearn more about parameterized videos. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = {}")),(0,t.yg)("h3",{id:"progresscallback-optional"},"progressCallback (optional):"),(0,t.yg)("p",null,"A function that gets called with the progress of the rendering process. The\nfunction gets called with two arguments: the id of the worker that is calling\nthe function, and the progress of the rendering process (float between 0 and 1).\n",(0,t.yg)("inlineCode",{parentName:"p"},"default = () => {}")),(0,t.yg)("h3",{id:"settings-optional"},"settings (optional):"),(0,t.yg)("p",null,"An object with the following arguments:"),(0,t.yg)("h4",{id:"name-optional"},"name (optional):"),(0,t.yg)("p",null,"The file name of the video output - the video will be saved to ",(0,t.yg)("inlineCode",{parentName:"p"},"{name}.mp4"),".\n",(0,t.yg)("inlineCode",{parentName:"p"},'default = "project"')),(0,t.yg)("h3",{id:"workers-optional"},"workers (optional):"),(0,t.yg)("p",null,"The number of processes you want to use to parallelize rendering - for example,\nrendering a 100s long video with 10 workers means that 10 processes handle 10s\nof video each. Your laptop will probably render fastest with one worker, but VMs\nwith a lot of computing power can benefit from using more than one - ideally,\nyou should experiment what number gives you the best speedup. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = 1"),"."),(0,t.yg)("h4",{id:"range-optional"},"range (optional):"),(0,t.yg)("p",null,"The start and end second of the video. Can be used to only render a part of the\nvideo. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = [0, Infinity]")),(0,t.yg)("h4",{id:"dimensions-optional"},"dimensions (optional):"),(0,t.yg)("p",null,"Dimensions of the video to render as ","[x,y]",". Default: uses the value specified in\nproject.meta."),(0,t.yg)("h4",{id:"puppeteer-optional"},"puppeteer (optional):"),(0,t.yg)("p",null,"Launch options for puppeteer - is an instance of puppeteer's\n",(0,t.yg)("a",{parentName:"p",href:"https://pptr.dev/api/puppeteer.browserlaunchargumentoptions/"},"BrowserLaunchArgumentOptions")))}c.isMDXComponent=!0}}]);