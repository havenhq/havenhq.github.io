"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[9554],{2247:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>m});var a=t(4041);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),d=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(s.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=d(t),g=i,m=c["".concat(s,".").concat(g)]||c[g]||u[g]||o;return t?a.createElement(m,r(r({ref:n},p),{},{components:t})):a.createElement(m,r({ref:n},p))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[c]="string"==typeof e?e:i,r[1]=l;for(var d=2;d<o;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},6484:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=t(9575),i=(t(4041),t(2247));const o={sidebar_position:2,slug:"/basic-example"},r="Basic Code Example",l={unversionedId:"quickstart/basic-example",id:"quickstart/basic-example",title:"Basic Code Example",description:"For now, we can ignore all files in our revideo project except for",source:"@site/docs/quickstart/basic-example.mdx",sourceDirName:"quickstart",slug:"/basic-example",permalink:"/basic-example",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/quickstart/basic-example.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/basic-example"},sidebar:"docs",previous:{title:"Installation and Setup",permalink:"/installation-and-setup"},next:{title:"Rendering Video",permalink:"/rendering-video"}},s={},d=[{value:"Defining a generator function",id:"defining-a-generator-function",level:3},{value:"Adding Video and Audio elements",id:"adding-video-and-audio-elements",level:3},{value:"Play media for one second",id:"play-media-for-one-second",level:3},{value:"Animating the revideo logo",id:"animating-the-revideo-logo",level:3}],p={toc:d},c="wrapper";function u(e){let{components:n,...t}=e;return(0,i.yg)(c,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"basic-code-example"},"Basic Code Example"),(0,i.yg)("p",null,"For now, we can ignore all files in our revideo project except for\n",(0,i.yg)("inlineCode",{parentName:"p"},"src/scenes/example.tsx"),", as this is where the visuals and audio of our video\nare defined. Let's walk through all the parts of the code that might confuse\nyou, and provide explanations and references."),(0,i.yg)("h3",{id:"defining-a-generator-function"},"Defining a generator function"),(0,i.yg)("p",null,"Our animation is defined within a generator function that is passed to\n",(0,i.yg)("inlineCode",{parentName:"p"},"makeScene2D")," - this function describes the sequence of events happening in our\nvideo:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"import {Audio, Img, Video, makeScene2D} from '@revideo/2d';\nimport {all, chain, createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n// your animation flow here\n}\n")),(0,i.yg)("p",null,"Generator functions can return multiple values - when they are called, they will\nexecute until they first encounter a ",(0,i.yg)("inlineCode",{parentName:"p"},"yield")," statement, and return the yielded\nvalue. Revideo renders animations by continually calling the generator function,\nwhich will yield frames that we can export. It is not neccessary to understand\nhow this works exactly, but if you are interested, you can read about the\nanimation flow in revideo ",(0,i.yg)("a",{parentName:"p",href:"/flow"},"here"),"."),(0,i.yg)("h3",{id:"adding-video-and-audio-elements"},"Adding Video and Audio elements"),(0,i.yg)("p",null,"At the start of our generator function, we add ",(0,i.yg)("a",{parentName:"p",href:"/api/2d/components/Video"},"Video"),"\nand ",(0,i.yg)("a",{parentName:"p",href:"/api/2d/components/Audio"},"Audio")," tags to our ",(0,i.yg)("inlineCode",{parentName:"p"},"view"),", which will display\nthem on the canvas. Other components you could add include\n",(0,i.yg)("a",{parentName:"p",href:"/api/2d/components/Txt"},"Txt")," or ",(0,i.yg)("a",{parentName:"p",href:"/api/2d/components/Img"},"Img")," tags, or basic\nshapes like ",(0,i.yg)("a",{parentName:"p",href:"api/2d/components/Rect"},"Rect")," or\n",(0,i.yg)("a",{parentName:"p",href:"api/2d/components/Circle"},"Circle"),". You can find the API for all components\n",(0,i.yg)("a",{parentName:"p",href:"api/2d/components"},"here"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"yield view.add(\n  <>\n    <Video\n      src={'https://revideo-example-assets.s3.amazonaws.com/stars.mp4'}\n      play={true}\n      size={['100%', '100%']}\n    />\n    <Audio\n      src={'https://revideo-example-assets.s3.amazonaws.com/chill-beat.mp3'}\n      play={true}\n      time={17.0}\n    />\n  </>,\n);\n")),(0,i.yg)("p",null,"A few points about input arguments:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"In both cases, ",(0,i.yg)("inlineCode",{parentName:"li"},"src")," refers to the file, which points to a remote url on the\nbucket. Alternatively, you can use local files by passing their path."),(0,i.yg)("li",{parentName:"ul"},"Passing ",(0,i.yg)("inlineCode",{parentName:"li"},'size={["100%", "100%"]}')," makes the video stretch to the full width\nand height of its canvas."),(0,i.yg)("li",{parentName:"ul"},"Adding ",(0,i.yg)("inlineCode",{parentName:"li"},"play={true}")," makes both media elements play immediately, instead of\nbeing in a paused state.")),(0,i.yg)("h3",{id:"play-media-for-one-second"},"Play media for one second"),(0,i.yg)("p",null,"After adding our background video and audio, we execute"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"yield * waitFor(1);\n")),(0,i.yg)("p",null,"The function ",(0,i.yg)("a",{parentName:"p",href:"/api/core/flow/#waitFor"},"waitFor")," does - as the name suggests -\nnothing. It is particularly useful when waiting for media (like videos and\naudio) to play or when we want to have a still-standing image."),(0,i.yg)("h3",{id:"animating-the-revideo-logo"},"Animating the revideo logo"),(0,i.yg)("p",null,"Lastly, we let the revideo logo spin into our video:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-tsx"},"view.add(\n  <Img\n    width={'1%'}\n    ref={logoRef}\n    src={\n      'https://revideo-example-assets.s3.amazonaws.com/revideo-logo-white.png'\n    }\n  />,\n);\n\nyield *\n  chain(\n    all(logoRef().scale(40, 2), logoRef().rotation(360, 2)),\n    logoRef().scale(60, 1),\n  );\n")),(0,i.yg)("p",null,"A few things happen here: First, we add the revideo logo as an\n",(0,i.yg)("a",{parentName:"p",href:"/api/2d/components/Img"},"Img")," to our canvas. We set its initial width to only 1%\nof the screen, as we want it to grow as the video plays. We also pass a\n",(0,i.yg)("a",{parentName:"p",href:"/references"},"reference")," through ",(0,i.yg)("inlineCode",{parentName:"p"},"ref={logoRef}"),", which we had initialized\nbefore. Like ",(0,i.yg)("a",{parentName:"p",href:"https://react.dev/learn/referencing-values-with-refs"},"React refs"),",\nreferences allow us to access and modify the behavior of elements after they've\nbeen initialized."),(0,i.yg)("p",null,"In our code, we use a reference to the revideo logo to later animate it.\nParticularly, we run the following commands:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"scale(x, s)"),": scales the size of the logo to ",(0,i.yg)("inlineCode",{parentName:"li"},"x")," times its original size,\nwithin ",(0,i.yg)("inlineCode",{parentName:"li"},"n")," seconds."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("inlineCode",{parentName:"li"},"rotation(d, s)"),": rotates the image by ",(0,i.yg)("inlineCode",{parentName:"li"},"d")," degrees within ",(0,i.yg)("inlineCode",{parentName:"li"},"s")," seconds")),(0,i.yg)("p",null,"The flow of these animations is determined by the keywords ",(0,i.yg)("a",{parentName:"p",href:"/flow/#chain"},"chain"),"\nand ",(0,i.yg)("a",{parentName:"p",href:"/flow/#all"},"all"),". The former instructs revideo to play its input animations\nafter one another, while the latter instructs revideo to play them\nsimultaneously. As a result, we first see the revideo logo rotating around 360\ndegrees while growing to 40x its original size. After this is done, the logo\nstill grows to 60x its original size. You can learn more about the animation\nflow in revideo ",(0,i.yg)("a",{parentName:"p",href:"/flow"},"here"),"."))}u.isMDXComponent=!0}}]);