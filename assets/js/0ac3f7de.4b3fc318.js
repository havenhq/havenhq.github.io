"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[156],{2247:(e,t,r)=>{r.d(t,{xA:()=>u,yg:()=>h});var n=r(4041);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",y={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(r),d=a,h=c["".concat(p,".").concat(d)]||c[d]||y[d]||o;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4872:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>y,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=r(9575),a=(r(4041),r(2247));const o={sidebar_position:1,slug:"/preview-with-player"},i="Video Preview with Player",l={unversionedId:"guide/building-webapps/using-the-player",id:"guide/building-webapps/using-the-player",title:"Video Preview with Player",description:"Revideo provides a React Player component",source:"@site/docs/guide/building-webapps/using-the-player.mdx",sourceDirName:"guide/building-webapps",slug:"/preview-with-player",permalink:"/preview-with-player",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/guide/building-webapps/using-the-player.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/preview-with-player"},sidebar:"docs",previous:{title:"Building Web Apps",permalink:"/category/building-web-apps"},next:{title:"Local Development with the CLI",permalink:"/render-endpoint"}},p={},s=[{value:"Using the Player with the CLI (recommended)",id:"using-the-player-with-the-cli-recommended",level:3},{value:"Using the Player manually",id:"using-the-player-manually",level:3}],u={toc:s},c="wrapper";function y(e){let{components:t,...r}=e;return(0,a.yg)(c,(0,n.A)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"video-preview-with-player"},"Video Preview with Player"),(0,a.yg)("p",null,"Revideo provides a React Player component\n(",(0,a.yg)("a",{parentName:"p",href:"/api/player-react/player"},"API reference"),") to embed Revideo projects into your\nReact or NextJS web app. The component lets you preview videos and changes made\nto your variables in real-time without forcing you to export your project to mp4\nbeforehand. A full example of this can be found in our\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/saas-template"},"SaaS Template"),"."),(0,a.yg)("p",null,"To display a project using the player, you first need to build your Revideo\nproject, give your web app access to the built project file and reference it\nthrough the ",(0,a.yg)("inlineCode",{parentName:"p"},"src")," prop of the ",(0,a.yg)("inlineCode",{parentName:"p"},"<Player/>"),". If you use custom css (e.g. to\nspecify fonts) or local assets (through the ",(0,a.yg)("inlineCode",{parentName:"p"},"/public")," folder in your Revideo\nproject), you will also have to make these assets available to your web app\n(either through serving them or copying over files)."),(0,a.yg)("p",null,"Revideo provides a CLI command to serve your project that automatically serves\nyour Revideo project and rebuilds it when you make changes, which you can use\nduring development along with the Player."),(0,a.yg)("h3",{id:"using-the-player-with-the-cli-recommended"},"Using the Player with the CLI (recommended)"),(0,a.yg)("p",null,"Inside your Revideo project, run:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npx revideo serve\n")),(0,a.yg)("p",null,"This will start to serve the project located in ",(0,a.yg)("inlineCode",{parentName:"p"},"./src/project.ts")," on port 4000\n(you can change these values using the ",(0,a.yg)("inlineCode",{parentName:"p"},"--port")," and ",(0,a.yg)("inlineCode",{parentName:"p"},"--projectFile")," flags). Now,\ninside your web app, you can use the player like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {Player} from '@revideo/player-react';\n\n<Player src=\"http://localhost:4000/player/\" />;\n")),(0,a.yg)("p",null,"The ",(0,a.yg)("inlineCode",{parentName:"p"},"serve")," command in the CLI is the recommended and most convenient option for\nlocal development. It automatically builds your project and serves all the\nrequired assets (such as your project file, assets in ",(0,a.yg)("inlineCode",{parentName:"p"},"/public"),", and css), so\nthat you don't have to copy them over into your web app - what you see inside\nthe player in your web app should be the same as what you see in the editor that\nyou see when you run ",(0,a.yg)("inlineCode",{parentName:"p"},"npm start"),". When you make changes to your Revideo project,\nyou also won't have to rebuild your project, as the CLI watches for changes and\nwill handle them automatically."),(0,a.yg)("h3",{id:"using-the-player-manually"},"Using the Player manually"),(0,a.yg)("p",null,"If you don't want to use the CLI to serve your built project, you can build it\nmanually by running:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm run build\n")),(0,a.yg)("p",null,"This will create a directory in your project root containing your built project,\ntypically in ",(0,a.yg)("inlineCode",{parentName:"p"},"dist"),". You can then copy all of these files to any public\ndirectory on your web app server and embed the player by specifying the path to\nthe directory. Say you copied the files to ",(0,a.yg)("inlineCode",{parentName:"p"},"/public/outDir")," inside your web app,\nand the folder is accessible via ",(0,a.yg)("inlineCode",{parentName:"p"},"https://example.com/outDir")," - you can then\nembed the player like this:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"import {Player} from '@revideo/player-react';\n\n<Player src=\"https://example.com/outDir/\" />;\n")))}y.isMDXComponent=!0}}]);