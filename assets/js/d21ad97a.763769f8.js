"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[3738],{2247:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(4041);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),l=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,g=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(g,a(a({ref:n},p),{},{components:t})):r.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[d]="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3455:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var r=t(9575),o=(t(4041),t(2247));const i={sidebar_position:2,slug:"/project-structure"},a="Project Structure",s={unversionedId:"guide/project-structure",id:"guide/project-structure",title:"Project Structure",description:"Revideo projects are structured similar to most Typescript projects. Here is the",source:"@site/docs/guide/project-structure.mdx",sourceDirName:"guide",slug:"/project-structure",permalink:"/project-structure",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/guide/project-structure.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/project-structure"},sidebar:"docs",previous:{title:"Quickstart",permalink:"/installation-and-setup"},next:{title:"Designing Animations",permalink:"/designing-animatins"}},c={},l=[{value:"<code>./src/scenes/example.tsx</code>",id:"srcscenesexampletsx",level:3},{value:"<code>./src/project.ts</code>",id:"srcprojectts",level:3},{value:"<code>vite.config.ts</code>",id:"viteconfigts",level:3},{value:"<code>./src/render.ts</code>",id:"srcrenderts",level:3},{value:"Files in <code>/public</code>",id:"files-in-public",level:3}],p={toc:l},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.yg)(d,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"project-structure"},"Project Structure"),(0,o.yg)("p",null,"Revideo projects are structured similar to most Typescript projects. Here is the\nstructure of the default project that gets initialized when you run\n",(0,o.yg)("inlineCode",{parentName:"p"},"npm init @revideo@latest"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"my-project/\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 package-lock.json\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 vite.config.ts\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 project.ts\n\u2502   \u251c\u2500\u2500 render.ts\n\u2502   \u251c\u2500\u2500 project.meta\n\u2502   \u2514\u2500\u2500 scenes/\n\u2502       \u2514\u2500\u2500 example.tsx\n\u2514\u2500\u2500 public/\n    \u2514\u2500\u2500 my-video.mp4\n")),(0,o.yg)("p",null,"Let's walk through the most relevant files:"),(0,o.yg)("h3",{id:"srcscenesexampletsx"},(0,o.yg)("inlineCode",{parentName:"h3"},"./src/scenes/example.tsx")),(0,o.yg)("p",null,"Files inside the ",(0,o.yg)("inlineCode",{parentName:"p"},"./src/scenes")," folder such as ",(0,o.yg)("inlineCode",{parentName:"p"},"example.tsx")," are the ones you'll\nmodify the most in order to define video templates. Scenes describe how your\nvideo should look like. They need to specify a default export that calls\n",(0,o.yg)("inlineCode",{parentName:"p"},"makeScene2D")," on a generator function describing what the desired video should\nlook like:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const videoFile = useScene().variables.get(\n    'video',\n    'https://revideo-example-assets.s3.amazonaws.com/stars.mp4',\n  )();\n\n  yield view.add(<Video src={videoFile} size={['100%', '100%']} play={true} />);\n\n  yield* waitFor(10);\n});\n")),(0,o.yg)("h3",{id:"srcprojectts"},(0,o.yg)("inlineCode",{parentName:"h3"},"./src/project.ts")),(0,o.yg)("p",null,"Your project file does two things:"),(0,o.yg)("ol",null,(0,o.yg)("li",{parentName:"ol"},"It defines an array of scenes to create a full video"),(0,o.yg)("li",{parentName:"ol"},"It accepts video variables that will be passed to your video when you look at\nit in the visual editor (when you run ",(0,o.yg)("inlineCode",{parentName:"li"},"npm start"),")")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"import {makeProject} from '@revideo/core';\n\nimport example from './scenes/example?scene';\nimport example2 from './scenes/example2?scene';\n\n\nexport default makeProject({\n  scenes: [example, example2],\n  variables: { video: \"https://revideo-example-assets.s3.amazonaws.com/beach.mp4\"}\n});\n")),(0,o.yg)("p",null,"When specifying multiple scenes, the scenes will be played after another. You\ncan also add ",(0,o.yg)("a",{parentName:"p",href:"/transitions"},"transitions")," between them. A new scene will not\ninherit any nodes from an old scene. This can have a positive influence on\nperformance, especially when your scene is very bloated (as it contains a lot of\nnodes). In this case, recalculating the scene (for instance when navigating to a\nnew time in the player) can be an expensive operation and is faster when you\nhave multiple smaller scenes instead."),(0,o.yg)("p",null,"However, in most cases, it is not necessary to use multiple scenes. For logical\nseperation, you can instead define generator function outside of your main\ngenerator function in ",(0,o.yg)("inlineCode",{parentName:"p"},"makeScene2D")," and call them there."),(0,o.yg)("h3",{id:"viteconfigts"},(0,o.yg)("inlineCode",{parentName:"h3"},"vite.config.ts")),(0,o.yg)("p",null,"Revideo projects are served using ",(0,o.yg)("a",{parentName:"p",href:"https://vitejs.dev/"},"vite"),". The\n",(0,o.yg)("inlineCode",{parentName:"p"},"vite.config.ts")," file specifically configures the server used to serve the\nvisual editor you see when running ",(0,o.yg)("inlineCode",{parentName:"p"},"npm start")," inside your project. The default\nconfig looks as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [motionCanvas()],\n});\n")),(0,o.yg)("p",null,"As you can see, the default settings are sufficient, and the only thing we\nmodify is using the 'motionCanvas' plugin. This plugin enables Motion Canvas /\nRevideo-related functionality, such as communication between the browser in\nwhich the HTML canvas is rendered and drawn to, and a \"backend\" process running\nffmpeg for audio processing."),(0,o.yg)("p",null,"You can modify some settings of the motion canvas plugin, for instance to point\nto another project file than the default ",(0,o.yg)("inlineCode",{parentName:"p"},"project.ts"),", or to select another\noutput folder than the default ",(0,o.yg)("inlineCode",{parentName:"p"},"./output"),". You can also modify some vite server\nsettings here, for instance on which port your application is served:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import {defineConfig} from 'vite';\nimport motionCanvas from '@revideo/vite-plugin';\n\nexport default defineConfig({\n  plugins: [\n    motionCanvas({\n      output: './other-output-folder',\n      project: './src/project2.ts',\n    }),\n  ],\n  server: {\n    port: 5000,\n  },\n});\n")),(0,o.yg)("h3",{id:"srcrenderts"},(0,o.yg)("inlineCode",{parentName:"h3"},"./src/render.ts")),(0,o.yg)("p",null,"This file contains code to render your video. By default, you can execute its\ncode by running ",(0,o.yg)("inlineCode",{parentName:"p"},"npm run render")," (assuming that you bootstrapped your project\nusing ",(0,o.yg)("inlineCode",{parentName:"p"},"npm init @revideo@latest"),"). Note that the\n",(0,o.yg)("a",{parentName:"p",href:"/api/renderer/renderVideo"},(0,o.yg)("inlineCode",{parentName:"a"},"renderVideo()"))," function accepts variables of its\nown and does not use the ones from ",(0,o.yg)("inlineCode",{parentName:"p"},"./src/project.ts"),"."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre"},"import {renderVideo} from '@revideo/renderer';\n\nasync function render() {\n    console.log('Rendering video...');\n\n    // This is the main function that renders the video\n    const file = await renderVideo({\n        projectFile: './src/project.ts',\n        variables: { video: \"\" }\n        settings: { logProgress: true }\n    });\n\n    console.log(`Rendered video to ${file}`);\n}\n\nrender();\n")),(0,o.yg)("p",null,"This code is not neccessary to start the editor or your project and is not tied\nto any other rendering functionality (like the renderer of the development\nserver from ",(0,o.yg)("inlineCode",{parentName:"p"},"npx revideo serve"),"). You can safely remove it if you don't need it."),(0,o.yg)("h3",{id:"files-in-public"},"Files in ",(0,o.yg)("inlineCode",{parentName:"h3"},"/public")),(0,o.yg)("p",null,"If you want to work with local files, you can put them into the ",(0,o.yg)("inlineCode",{parentName:"p"},"/public"),"\nfolder. You can then access them inside your scene via their name:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx"},"import {Video, makeScene2D} from '@revideo/2d';\nimport {waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  yield view.add(\n    <Video src={'/my-video.mp4'} size={['100%', '100%']} play={true} />,\n  );\n\n  yield* waitFor(10);\n});\n")))}u.isMDXComponent=!0}}]);