"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[1426],{2247:(e,n,r)=>{r.d(n,{xA:()=>d,yg:()=>g});var i=r(4041);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function p(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},o=Object.keys(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)r=o[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=i.createContext({}),c=function(e){var n=i.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},d=function(e){var n=c(e.components);return i.createElement(s.Provider,{value:n},e.children)},l="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,o=e.originalType,s=e.parentName,d=p(e,["components","mdxType","originalType","parentName"]),l=c(r),u=t,g=l["".concat(s,".").concat(u)]||l[u]||m[u]||o;return r?i.createElement(g,a(a({ref:n},d),{},{components:r})):i.createElement(g,a({ref:n},d))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var o=r.length,a=new Array(o);a[0]=u;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p[l]="string"==typeof e?e:t,a[1]=p;for(var c=2;c<o;c++)a[c]=r[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,r)}u.displayName="MDXCreateElement"},2439:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>p,toc:()=>c});var i=r(9575),t=(r(4041),r(2247));const o={sidebar_position:3,slug:"/bezier-curves"},a="B\xe9zier Curves",p={unversionedId:"components/bezier",id:"components/bezier",title:"B\xe9zier Curves",description:"_Note: These docs were adopted from the original",source:"@site/docs/components/bezier.mdx",sourceDirName:"components",slug:"/bezier-curves",permalink:"/bezier-curves",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/components/bezier.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"/bezier-curves"},sidebar:"docs",previous:{title:"LaTeX",permalink:"/nodes"},next:{title:"Spline",permalink:"/spline"}},s={},c=[{value:"Using the components",id:"using-the-components",level:2},{value:"Defining control points",id:"defining-control-points",level:3},{value:"Drawing arrows",id:"drawing-arrows",level:3},{value:"Examples",id:"examples",level:2}],d={toc:c},l="wrapper";function m(e){let{components:n,...r}=e;return(0,t.yg)(l,(0,i.A)({},d,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"b\xe9zier-curves"},"B\xe9zier Curves"),(0,t.yg)("p",null,(0,t.yg)("em",{parentName:"p"},"Note: These docs were adopted from the original\n",(0,t.yg)("a",{parentName:"em",href:"https://motioncanvas.io/docs/"},"Motion Canvas")," docs")),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 1);\n  yield* bezier().start(1, 1).to(0, 1);\n});\n")),(0,t.yg)("p",null,"B\xe9zier curves are ubiquitous in computer graphics. Motion Canvas comes with\ncomponents to draw both quadratic and cubic B\xe9zier curves."),(0,t.yg)("admonition",{type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"If you're trying to draw more complicated shapes than single B\xe9zier curves allow\nfor, check out the ",(0,t.yg)("a",{parentName:"p",href:"/spline"},(0,t.yg)("inlineCode",{parentName:"a"},"Spline"))," component, instead.")),(0,t.yg)("h2",{id:"using-the-components"},"Using the components"),(0,t.yg)("p",null,"Each example below applies to both the ",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/QuadBezier"},(0,t.yg)("inlineCode",{parentName:"a"},"QuadBezier"))," and\n",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/CubicBezier"},(0,t.yg)("inlineCode",{parentName:"a"},"CubicBezier"))," nodes. You can switch between the two types of\ncurves using the dropdown on the right side of the animation player."),(0,t.yg)("h3",{id:"defining-control-points"},"Defining control points"),(0,t.yg)("p",null,"B\xe9zier curves are defined by a start and end point, as well as several control\npoints. The exact number of control points is different for different kinds of\nB\xe9zier curves. A quadratic B\xe9zier curve has only a single control point whereas\na cubic B\xe9zier curve has two."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n    />,\n  );\n\n  yield* waitFor(1);\n});\n")),(0,t.yg)("p",null,"All points of a B\xe9zier curve are compound signals. This means that it's possible\nto animate their ",(0,t.yg)("inlineCode",{parentName:"p"},"x")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"y")," components separately."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"{6,13}","{6,13}":!0},"view.add(\n  <CubicBezier\n    ref={bezier}\n    lineWidth={6}\n    stroke={'lightseagreen'}\n    p0={[-200, -70]}\n    p1={[120, -120]}\n    p2={[-120, 120]}\n    p3={[200, 70]}\n  />,\n);\n\nyield * bezier().p0.x(200, 1);\n")),(0,t.yg)("h3",{id:"drawing-arrows"},"Drawing arrows"),(0,t.yg)("p",null,"Similar to the ",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/Line"},(0,t.yg)("inlineCode",{parentName:"a"},"Line"))," and ",(0,t.yg)("a",{parentName:"p",href:"/spline"},(0,t.yg)("inlineCode",{parentName:"a"},"Spline"))," components, we can also add\narrowheads to a B\xe9zier curve. To do so, we can use the\n",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#startArrow"},(0,t.yg)("inlineCode",{parentName:"a"},"startArrow"))," and ",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#endArrow"},(0,t.yg)("inlineCode",{parentName:"a"},"endArrow"))," properties. We can\ncontrol the size of the arrowheads with the ",(0,t.yg)("a",{parentName:"p",href:"/api/2d/components/QuadBezierProps#arrowSize"},(0,t.yg)("inlineCode",{parentName:"a"},"arrowSize"))," signal."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Cubic B\xe9zier\nimport {makeScene2D, CubicBezier} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n\n// snippet Quadratic B\xe9zier\nimport {makeScene2D, QuadBezier} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<QuadBezier>();\n\n  view.add(\n    <QuadBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-150, 50]}\n      p1={[0, -120]}\n      p2={[150, 50]}\n      arrowSize={16}\n      startArrow\n      endArrow\n    />,\n  );\n\n  yield* bezier().arrowSize(20, 1).to(10, 1).to(16, 1);\n});\n")),(0,t.yg)("admonition",{title:"Animating adding arrows",type:"tip"},(0,t.yg)("p",{parentName:"admonition"},"Since ",(0,t.yg)("inlineCode",{parentName:"p"},"startArrow")," and ",(0,t.yg)("inlineCode",{parentName:"p"},"endArrow")," are booleans, they don't lend themselves well\nto being animated. To animate adding arrows to a B\xe9zier curve, we should animate\n",(0,t.yg)("inlineCode",{parentName:"p"},"arrowSize"),", instead."),(0,t.yg)("pre",{parentName:"admonition"},(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"{7,13}","{7,13}":!0},"view.add(\n  <QuadBezier\n    ref={bezier}\n    p0={[-150, 50]}\n    p1={[0, -120]}\n    p2={[150, 50]}\n    arrowSize={0}\n    startArrow\n    endArrow\n  />,\n);\n\nyield * bezier().arrowSize(16, 1);\n"))),(0,t.yg)("h2",{id:"examples"},"Examples"),(0,t.yg)("p",null,"The following section shows examples of common animations for B\xe9zier curves."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"// snippet Drawing B\xe9zier curves\nimport {makeScene2D, CubicBezier} from '@revideo/2d';\nimport {createRef} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  view.add(\n    <CubicBezier\n      ref={bezier}\n      lineWidth={6}\n      stroke={'lightseagreen'}\n      p0={[-200, -70]}\n      p1={[120, -120]}\n      p2={[-120, 120]}\n      p3={[200, 70]}\n      end={0}\n    />,\n  );\n\n  yield* bezier().end(1, 2).to(0, 2);\n});\n\n// snippet Moving nodes along a curve\nimport {makeScene2D, CubicBezier, Rect} from '@revideo/2d';\nimport {createRef, waitFor, createSignal, createComputed} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const bezier = createRef<CubicBezier>();\n\n  const progress = createSignal(0);\n  const curvePoint = createComputed(() =>\n    bezier().getPointAtPercentage(progress()),\n  );\n\n  view.add(\n    <>\n      <CubicBezier\n        ref={bezier}\n        lineWidth={6}\n        stroke={'lightgray'}\n        p0={[-300, -70]}\n        p1={[120, -120]}\n        p2={[-120, 120]}\n        p3={[300, 70]}\n      />\n      <Rect\n        size={25}\n        fill={'lightseagreen'}\n        position={() => curvePoint().position}\n        rotation={() => curvePoint().tangent.degrees}\n      />\n    </>,\n  );\n\n  yield* progress(1, 2);\n  yield* waitFor(0.5);\n  yield* progress(0, 2);\n  yield* waitFor(0.5);\n});\n")))}m.isMDXComponent=!0}}]);