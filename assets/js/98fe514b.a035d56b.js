"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[9403],{2247:(e,n,r)=>{r.d(n,{xA:()=>p,yg:()=>h});var t=r(4041);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function d(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},u="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},g=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=d(e,["components","mdxType","originalType","parentName"]),u=l(r),g=o,h=u["".concat(s,".").concat(g)]||u[g]||c[g]||i;return r?t.createElement(h,a(a({ref:n},p),{},{components:r})):t.createElement(h,a({ref:n},p))}));function h(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var d={};for(var s in n)hasOwnProperty.call(n,s)&&(d[s]=n[s]);d.originalType=e,d[u]="string"==typeof e?e:o,a[1]=d;for(var l=2;l<i;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}g.displayName="MDXCreateElement"},9655:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var t=r(9575),o=(r(4041),r(2247));const i={sidebar_position:7,slug:"/rendering-videos"},a="Rendering Videos",d={unversionedId:"guide/rendering-videos",id:"guide/rendering-videos",title:"Rendering Videos",description:"As mentioned in the quickstart guide, you can render videos directly through the",source:"@site/docs/guide/rendering-videos.mdx",sourceDirName:"guide",slug:"/rendering-videos",permalink:"/rendering-videos",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/guide/rendering-videos.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:7,frontMatter:{sidebar_position:7,slug:"/rendering-videos"},sidebar:"docs",previous:{title:"Parameterized Videos",permalink:"/parameterized-video"},next:{title:"Building Web Apps",permalink:"/category/building-web-apps"}},s={},l=[{value:"Rendering with <code>renderVideo()</code> function",id:"rendering-with-rendervideo-function",level:3},{value:"Rendering from the browser",id:"rendering-from-the-browser",level:3},{value:"How does Rendering work?",id:"how-does-rendering-work",level:3},{value:"Rendering Speeds",id:"rendering-speeds",level:3},{value:"Parallelized Rendering",id:"parallelized-rendering",level:3}],p={toc:l},u="wrapper";function c(e){let{components:n,...r}=e;return(0,o.yg)(u,(0,t.A)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"rendering-videos"},"Rendering Videos"),(0,o.yg)("p",null,"As mentioned in the quickstart guide, you can render videos directly through the\nuser interface of the editor, or through a function call."),(0,o.yg)("h3",{id:"rendering-with-rendervideo-function"},"Rendering with ",(0,o.yg)("inlineCode",{parentName:"h3"},"renderVideo()")," function"),(0,o.yg)("p",null,"To render videos through a function call, you can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"renderVideo()"),"\nfunction (",(0,o.yg)("a",{parentName:"p",href:"/api/renderer/renderVideo"},"API reference"),"):"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import {renderVideo} from '@revideo/renderer';\n\nasync function render() {\n  console.log('Rendering video...');\n\n  // This is the main function that renders the video\n  const file = await renderVideo({\n    projectFile: './src/project.ts',\n    settings: {logProgress: true},\n  });\n\n  console.log(`Rendered video to ${file}`);\n}\n\nrender();\n")),(0,o.yg)("h3",{id:"rendering-from-the-browser"},"Rendering from the browser"),(0,o.yg)("p",null,'To render videos from the editor, simply click the "Render" Button after opening\nthe editor with ',(0,o.yg)("inlineCode",{parentName:"p"},"npm start"),":"),(0,o.yg)("p",null,(0,o.yg)("img",{parentName:"p",src:"https://revideo-example-assets.s3.amazonaws.com/render-button.png",alt:"Render Button"})),(0,o.yg)("h3",{id:"how-does-rendering-work"},"How does Rendering work?"),(0,o.yg)("p",null,'The rendering process mostly runs in the browser. The only part that runs in a\nseparate "backend" nodejs process is everything related to audio processing.'),(0,o.yg)("p",null,"The code in the browser loops through all frames in the defined video, draws the\ndefined frames onto an\n",(0,o.yg)("a",{parentName:"p",href:"https://www.w3schools.com/html/html5_canvas.asp"},"HTML Canvas")," and feeds them\ninto the ",(0,o.yg)("inlineCode",{parentName:"p"},"VideoEncoder")," of the\n",(0,o.yg)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/VideoEncoder"},"WebCodecs API"),".\nThis turns all frames into a mute mp4 file."),(0,o.yg)("p",null,'In the "backend", ffmpeg is used to extract all audio from the ',(0,o.yg)("inlineCode",{parentName:"p"},"<Video/>")," and\n",(0,o.yg)("inlineCode",{parentName:"p"},"<Audio/>")," elements of the project and to merge them into a single audio file.\nThis file finally gets merged with the mute video produced in the browser to\nobtain the resulting mp4 video."),(0,o.yg)("h3",{id:"rendering-speeds"},"Rendering Speeds"),(0,o.yg)("p",null,"Since the release of v0.4.6, rendering videos is almost always faster than\nreal-time (meaning that rendering a 1-minute video takes less than one minute).\nWe have created a ",(0,o.yg)("a",{parentName:"p",href:"/common-issues/slow-rendering"},"guide")," that describes what\naffects rendering speeds and how to make rendering faster."),(0,o.yg)("h3",{id:"parallelized-rendering"},"Parallelized Rendering"),(0,o.yg)("p",null,"If you want to speed up rendering, you can parallelize the rendering process of\nyour videos. This means that instead of rendering your full video through a\nsingle process, you can use multiple processes to render only small parts of\nyour video and subsequently merge the single parts together (for example, you\ncan use 10 processes to render 1 minute of a 10-minute video each)."),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"renderVideo()")," function\n(",(0,o.yg)("a",{parentName:"p",href:"http://localhost:3000/renderer/renderVideo"},"API reference"),") provides a\n",(0,o.yg)("inlineCode",{parentName:"p"},"settings.worker")," argument that you can use to parallelize rendering in a single\nprocess. This is useful when you have a lot of RAM available."),(0,o.yg)("p",null,"Alternatively, the best way to set up parallelized rendering is to use\nserverless function providers like AWS Lambda. Revideo provides a\n",(0,o.yg)("inlineCode",{parentName:"p"},"renderPartialVideo()")," function\n(",(0,o.yg)("a",{parentName:"p",href:"http://localhost:3000/renderer/renderPartialVideo"},"API reference"),") that you\ncan use to render a partial video - you can use it together with\n",(0,o.yg)("inlineCode",{parentName:"p"},"concatenateMedia()")," (",(0,o.yg)("a",{parentName:"p",href:"/ffmpeg/concatenateMedia"},"API reference"),") and\n",(0,o.yg)("inlineCode",{parentName:"p"},"mergeAudioWithVideo()"),"\n(",(0,o.yg)("a",{parentName:"p",href:"http://localhost:3000/ffmpeg/mergeAudioWithVideo"},"API reference"),") to\nparallelize rendering across serverless functions. We also provide guides and\nexample projects for setting up parallelized rendering on\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/parallelized-aws-lambda"},"AWS Lambda"),"\n(recommended) and\n",(0,o.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/google-cloud-run-parallelized"},"Google Cloud Functions"),"."))}c.isMDXComponent=!0}}]);