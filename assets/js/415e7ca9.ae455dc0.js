"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[8516],{2247:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>u});var r=n(4041);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=p(n),f=o,u=d["".concat(c,".").concat(f)]||d[f]||m[f]||a;return n?r.createElement(u,i(i({ref:t},l),{},{components:n})):r.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},332:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(9575),o=(n(4041),n(2247));const a={sidebar_position:1,slug:"/streaming-text"},i="Streaming Text",s={unversionedId:"code-snippets/streaming-text",id:"code-snippets/streaming-text",title:"Streaming Text",description:"In many cases, you might want to stream texts to a video rather than having all",source:"@site/docs/code-snippets/streaming-text.mdx",sourceDirName:"code-snippets",slug:"/streaming-text",permalink:"/streaming-text",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/code-snippets/streaming-text.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:1,frontMatter:{sidebar_position:1,slug:"/streaming-text"},sidebar:"docs",previous:{title:"Code Snippets",permalink:"/category/code-snippets"},next:{title:"Moving and Manipulating Objects",permalink:"/moving-manipulating-objects"}},c={},p=[],l={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,o.yg)(d,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"streaming-text"},"Streaming Text"),(0,o.yg)("p",null,"In many cases, you might want to stream texts to a video rather than having all\nof it appear at once."),(0,o.yg)("p",null,"One way to achieve this is by using the ",(0,o.yg)("inlineCode",{parentName:"p"},".text()")," method of the ",(0,o.yg)("inlineCode",{parentName:"p"},"<Txt>")," tag."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  yield* textRef().text('This is a text', 2);\n});\n")),(0,o.yg)("p",null,"The second argument (in this case, ",(0,o.yg)("inlineCode",{parentName:"p"},"2"),") refers to the time it takes for the text\nto appear."),(0,o.yg)("p",null,"If you want more control over when words appear (for instance for captions with\nexact timestamps), you can repeatedly ",(0,o.yg)("inlineCode",{parentName:"p"},".add()")," text to your ",(0,o.yg)("inlineCode",{parentName:"p"},"<Txt>")," node:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-tsx",metastring:"editor",editor:!0},"import {Txt, makeScene2D} from '@revideo/2d';\nimport {createRef, waitFor} from '@revideo/core';\n\nexport default makeScene2D(function* (view) {\n  const textRef = createRef<Txt>();\n  yield view.add(\n    <Txt fontFamily={'Sans-Serif'} fill={'red'} ref={textRef}></Txt>,\n  );\n\n  const words = ['This', 'is', 'a', 'text'];\n  const secondsToAppear = [0.3, 0.6, 0.4, 0.2, 0.5];\n\n  for (let i = 0; i < words.length; i++) {\n    textRef().add(<Txt>{words[i]} </Txt>);\n    yield* waitFor(secondsToAppear[i]);\n  }\n});\n")))}m.isMDXComponent=!0}}]);