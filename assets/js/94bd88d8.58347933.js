"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[6030],{2247:(e,n,r)=>{r.d(n,{xA:()=>s,yg:()=>m});var o=r(4041);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,o)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,o,t=function(e,n){if(null==e)return{};var r,o,t={},i=Object.keys(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)r=i[o],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var p=o.createContext({}),d=function(e){var n=o.useContext(p),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},s=function(e){var n=d(e.components);return o.createElement(p.Provider,{value:n},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(r),f=t,m=u["".concat(p,".").concat(f)]||u[f]||g[f]||i;return r?o.createElement(m,a(a({ref:n},s),{},{components:r})):o.createElement(m,a({ref:n},s))}));function m(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,a=new Array(i);a[0]=f;var l={};for(var p in n)hasOwnProperty.call(n,p)&&(l[p]=n[p]);l.originalType=e,l[u]="string"==typeof e?e:t,a[1]=l;for(var d=2;d<i;d++)a[d]=r[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,r)}f.displayName="MDXCreateElement"},4115:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>p,contentTitle:()=>a,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var o=r(9575),t=(r(4041),r(2247));const i={sidebar_position:2,slug:"/renderer/renderPartialVideo"},a="renderPartialVideo()",l={unversionedId:"api-reference/revideo-renderer/renderPartialVideo",id:"api-reference/revideo-renderer/renderPartialVideo",title:"renderPartialVideo()",description:"The renderPartialVideo() function lets you render partial videos if you want",source:"@site/docs/api-reference/revideo-renderer/renderPartialVideo.mdx",sourceDirName:"api-reference/revideo-renderer",slug:"/renderer/renderPartialVideo",permalink:"/renderer/renderPartialVideo",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/api-reference/revideo-renderer/renderPartialVideo.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/renderer/renderPartialVideo"},sidebar:"docs",previous:{title:"mergeAudioWithVideo()",permalink:"/ffmpeg/mergeAudioWithVideo"},next:{title:"Example Projects",permalink:"/category/example-projects"}},p={},d=[{value:"Example Usage",id:"example-usage",level:2},{value:"Arguments",id:"arguments",level:2},{value:"configFile:",id:"configfile",level:3},{value:"workerId",id:"workerid",level:3},{value:"numWorkers",id:"numworkers",level:3},{value:"params (optional):",id:"params-optional",level:3},{value:"progressCallback (optional):",id:"progresscallback-optional",level:3},{value:"settings (optional):",id:"settings-optional",level:3},{value:"name (optional):",id:"name-optional",level:4},{value:"workers (optional):",id:"workers-optional",level:4},{value:"range (optional):",id:"range-optional",level:4},{value:"dimensions (optional):",id:"dimensions-optional",level:4},{value:"logProgress (optional):",id:"logprogress-optional",level:4},{value:"ffmpeg (optional):",id:"ffmpeg-optional",level:4},{value:"ffmpegLogLevel (optional):",id:"ffmpegloglevel-optional",level:5},{value:"ffmpegPath (optional):",id:"ffmpegpath-optional",level:5},{value:"puppeteer (optional):",id:"puppeteer-optional",level:4},{value:"Returns",id:"returns",level:2}],s={toc:d},u="wrapper";function g(e){let{components:n,...r}=e;return(0,t.yg)(u,(0,o.A)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"renderpartialvideo"},"renderPartialVideo()"),(0,t.yg)("p",null,"The ",(0,t.yg)("inlineCode",{parentName:"p"},"renderPartialVideo()")," function lets you render partial videos if you want\nto distribute the rendering workload across multiple workers. You can find an\nexample of this in our\n",(0,t.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/examples/tree/main/google-cloud-run-parallelized"},"Cloud Functions example"),".\nTo use ",(0,t.yg)("inlineCode",{parentName:"p"},"renderPartialVideo()"),", you don't have to manually assign a range of\nframes or timestamps to render. Instead, you just pass the worker id and the\ntotal number of workers your rendering job uses, and the function will figure\nout the frames to render by itself."),(0,t.yg)("p",null,"Since merging partial videos gives you audio issues (audio becomes laggy), this\nfunction returns the path to the audio file and mute video file of the partial\nvideo. Afterwards, you should first concatenate all of the partial audio files\nand then concatenate all of the partial video files, and then merge the audio\nand video to obtain your final mp4 file."),(0,t.yg)("p",null,"To do this, you can use the ",(0,t.yg)("inlineCode",{parentName:"p"},"concatenateMedia()"),"\n(",(0,t.yg)("a",{parentName:"p",href:"/ffmpeg/concatenateMedia"},"docs"),") and ",(0,t.yg)("inlineCode",{parentName:"p"},"mergeAudioWithVideo()"),"\n(",(0,t.yg)("a",{parentName:"p",href:"/ffmpeg/mergeAudioWithVideo"},"docs"),") functions from ",(0,t.yg)("inlineCode",{parentName:"p"},"@revideo/ffmpeg"),"."),(0,t.yg)("h2",{id:"example-usage"},"Example Usage"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-tsx"},"import {renderPartialVideo} from '@revideo/renderer';\n\nconst {audioFile, videoFile} = renderPartialVideo(\n  './vite.config.ts',\n  3,\n  10,\n  {color: 'white'},\n  () => {},\n  {\n    name: 'out',\n    workers: 1,\n    range: [1, 3],\n    dimensions: [1080, 1792],\n    logProgress: true,\n    fmpeg: {\n      ffmpegLogLevel: 'error',\n      ffmpegPath: 'ffmpeg',\n    },\n    puppeteer: {\n      args: ['--no-sandbox'],\n    },\n  },\n);\n")),(0,t.yg)("h2",{id:"arguments"},"Arguments"),(0,t.yg)("h3",{id:"configfile"},"configFile:"),(0,t.yg)("p",null,"A string pointing towards your Vite config file. This will almost always be\n",(0,t.yg)("inlineCode",{parentName:"p"},"vite.config.ts"),"."),(0,t.yg)("h3",{id:"workerid"},"workerId"),(0,t.yg)("p",null,"The id of the worker. We start counting at 0, so if you have 5 workers, values\nfrom 0 to 4 are accepted."),(0,t.yg)("h3",{id:"numworkers"},"numWorkers"),(0,t.yg)("p",null,"The number of workers you use in total. This informs the function which range of\nthe video to render. For instance, worker 0 out of 10 workers would render 1/10\nof the full video, whereas worker 0 out of 2 would render half of the video."),(0,t.yg)("h3",{id:"params-optional"},"params (optional):"),(0,t.yg)("p",null,"Parameters / or variables passed to your video. See ",(0,t.yg)("a",{parentName:"p",href:"/parameterized-video"},"here"),"\nlearn more about parameterized videos. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = {}")),(0,t.yg)("h3",{id:"progresscallback-optional"},"progressCallback (optional):"),(0,t.yg)("p",null,"A function that gets called with the progress of the rendering process. The\nfunction gets called with two arguments: the id of the worker that is calling\nthe function, and the progress of the rendering process (float between 0 and 1).\n",(0,t.yg)("inlineCode",{parentName:"p"},"default = () => {}")),(0,t.yg)("h3",{id:"settings-optional"},"settings (optional):"),(0,t.yg)("p",null,"An object with the following arguments:"),(0,t.yg)("h4",{id:"name-optional"},"name (optional):"),(0,t.yg)("p",null,"The file name of the video output - the video will be saved to ",(0,t.yg)("inlineCode",{parentName:"p"},"{name}.mp4"),".\n",(0,t.yg)("inlineCode",{parentName:"p"},'default = "project"')),(0,t.yg)("h4",{id:"workers-optional"},"workers (optional):"),(0,t.yg)("p",null,"The number of processes you want to use to parallelize rendering - for example,\nrendering a 100s long video with 10 workers means that 10 processes handle 10s\nof video each. Your laptop will probably render fastest with one worker, but VMs\nwith a lot of computing power can benefit from using more than one - ideally,\nyou should experiment what number gives you the best speedup. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = 1"),"."),(0,t.yg)("h4",{id:"range-optional"},"range (optional):"),(0,t.yg)("p",null,"The start and end second of the video. Can be used to only render a part of the\nvideo. ",(0,t.yg)("inlineCode",{parentName:"p"},"default = [0, Infinity]")),(0,t.yg)("h4",{id:"dimensions-optional"},"dimensions (optional):"),(0,t.yg)("p",null,"Dimensions of the video to render as ","[x,y]",". Default: uses the value specified in\nproject.meta."),(0,t.yg)("h4",{id:"logprogress-optional"},"logProgress (optional):"),(0,t.yg)("p",null,"Logs render progress to the console if set to ",(0,t.yg)("inlineCode",{parentName:"p"},"true")),(0,t.yg)("h4",{id:"ffmpeg-optional"},"ffmpeg (optional):"),(0,t.yg)("p",null,"FFmpeg options - is an instance of FFmpegOptions."),(0,t.yg)("h5",{id:"ffmpegloglevel-optional"},"ffmpegLogLevel (optional):"),(0,t.yg)("p",null,"The log level of FFmpeg. Can be one of ",(0,t.yg)("inlineCode",{parentName:"p"},"error"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"warning"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"info"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"verbose"),",\n",(0,t.yg)("inlineCode",{parentName:"p"},"debug"),", ",(0,t.yg)("inlineCode",{parentName:"p"},"trace"),". ",(0,t.yg)("inlineCode",{parentName:"p"},'default = "error"')),(0,t.yg)("h5",{id:"ffmpegpath-optional"},"ffmpegPath (optional):"),(0,t.yg)("p",null,"The path to the FFmpeg binary. If not specified, the FFmpeg binary shipped with\nRevideo will be used."),(0,t.yg)("h4",{id:"puppeteer-optional"},"puppeteer (optional):"),(0,t.yg)("p",null,"Launch options for puppeteer - is an instance of puppeteer's\n",(0,t.yg)("a",{parentName:"p",href:"https://pptr.dev/api/puppeteer.browserlaunchargumentoptions/"},"BrowserLaunchArgumentOptions")),(0,t.yg)("h2",{id:"returns"},"Returns"),(0,t.yg)("p",null,(0,t.yg)("inlineCode",{parentName:"p"},"{ audioFile, videoFile }"),", where both are strings representing the path to the\nfiles."))}g.isMDXComponent=!0}}]);