"use strict";(self.webpackChunk_revideo_docs=self.webpackChunk_revideo_docs||[]).push([[1549],{2247:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>g});var r=t(4041);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=a,g=c["".concat(l,".").concat(m)]||c[m]||u[m]||i;return t?r.createElement(g,o(o({ref:n},d),{},{components:t})):r.createElement(g,o({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[c]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9923:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=t(9575),a=(t(4041),t(2247));const i={sidebar_position:2,slug:"/preview-with-player"},o="Player for Preview & Editing",s={unversionedId:"webapps/preview-with-player",id:"webapps/preview-with-player",title:"Player for Preview & Editing",description:"To preview videos in the browser, you can use the Player Component (check it out",source:"@site/docs/webapps/preview-with-player.mdx",sourceDirName:"webapps",slug:"/preview-with-player",permalink:"/preview-with-player",draft:!1,editUrl:"https://github.com/havenhq/revideo/blob/main/packages/docs/docs/webapps/preview-with-player.mdx",tags:[],version:"current",lastUpdatedBy:"Justus Mattern",sidebarPosition:2,frontMatter:{sidebar_position:2,slug:"/preview-with-player"},sidebar:"docs",previous:{title:"Building Web Apps",permalink:"/category/building-web-apps"},next:{title:"Deploy a Revideo Project",permalink:"/render-endpoint"}},l={},p=[{value:"Real-Time Editing",id:"real-time-editing",level:3},{value:"Preloading Assets",id:"preloading-assets",level:3}],d={toc:p},c="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(c,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"player-for-preview--editing"},"Player for Preview & Editing"),(0,a.yg)("p",null,"To preview videos in the browser, you can use the Player Component (check it out\nin action in our\n",(0,a.yg)("a",{parentName:"p",href:"https://github.com/redotvideo/revideo-saas-template/blob/main/ui/src/app/edit/%5Bid%5D/page.tsx"},"Saas Template"),").\nTo use the component, you need to build your revideo project and reference the\nresulting file in the HTML component."),(0,a.yg)("p",null,"To build your project, run the following inside your Revideo project:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"npm run build\n")),(0,a.yg)("p",null,"You will now find a ",(0,a.yg)("inlineCode",{parentName:"p"},"project.js")," file in ",(0,a.yg)("inlineCode",{parentName:"p"},"/dist"),"."),(0,a.yg)("p",null,"If you want to use this file for the player component, for example in a web app\nbuilt with React or NextJS, you should copy this file over to your project, for\nexample in the ",(0,a.yg)("inlineCode",{parentName:"p"},"/public")," folder. Now you can display your video in a React /\nNextJS App:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"'use client';\nimport {useEffect, ComponentProps} from 'react';\nimport {MotionCanvasPlayerProps} from '@revideo/player';\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      'revideo-player': MotionCanvasPlayerProps & ComponentProps<'div'>;\n    }\n  }\n}\n\nexport default function YourComponent() {\n  useEffect(() => {\n    import('@revideo/player');\n  }, []);\n\n  const variables = {fill: 'white'};\n\n  return (\n    <revideo-player src=\"/project.js\" variables={JSON.stringify(variables)} />\n  );\n}\n")),(0,a.yg)("h3",{id:"real-time-editing"},"Real-Time Editing"),(0,a.yg)("p",null,"When the variables parameter changes, the updated inputs will be reflected\ninstantly in the preview. This enables real-time editing."),(0,a.yg)("h3",{id:"preloading-assets"},"Preloading Assets"),(0,a.yg)("p",null,"If your video uses assets from the internet, you might want to preload assets to\navoid a lag in the preview. For example, if you display a sequence of images,\nwith each image being shown for 5 seconds, your browser will only start loading\nthe image once it is supposed to show up on the screen, in this case after 5,\n10, 15 seconds and so on."),(0,a.yg)("p",null,"To avoid this, you can preload images by adding a ",(0,a.yg)("inlineCode",{parentName:"p"},"<link>")," tag and only display\nthe player once all assets are loaded:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-tsx"},"export default function YourComponent(){\n    const [assetsLoaded, setAssetsLoaded] = useState(false);\n    const images = [\"https://my-image-1.png\", \"https://my-image-2.png\"]\n\n    const variables = { images: images }\n\n    useEffect(() => {\n      const preloadLinks: HTMLLinkElement[] = [];\n      const totalImages = metadata?.images.length;\n      let loadedImagesCount = 0;\n\n      images.forEach((imageUrl: string) => { // preload images\n          const link = document.createElement('link');\n          link.rel = 'preload';\n          link.as = 'image';\n          link.href = imageUrl;\n          link.crossOrigin = 'anonymous';\n          document.head.appendChild(link);\n          preloadLinks.push(link);\n          const img = new Image();\n          img.onload = () => {\n            loadedImagesCount++;\n            if (loadedImagesCount === totalImages) { // set assetsLoaded = true when all images are loaded\n              setAssetsLoaded(true);\n            }\n          };\n          img.src = imageUrl;\n      });\n\n      return () => {\n        preloadLinks.forEach(link => {\n          document.head.removeChild(link);\n        });\n      };\n    }, [metadata]);\n\n    return (\n        { assetsLoaded ? ( // display player when assets are loaded, otherwise display \"Loading assets...\"\n            <revideo-player\n                src=\"/project.js\"\n                variables={JSON.stringify(variables)}\n            />\n            ) : <div>Loading assets...</div>\n        }\n    );\n}\n")))}u.isMDXComponent=!0}}]);